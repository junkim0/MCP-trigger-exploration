# MCP (Model Control Protocol) Trigger Methods Documentation
Last Updated: [Current Date]

## Overview
This document catalogs different methods to trigger specific MCPs (Model Control Protocols) in both Claude and Cursor environments. Each method is documented with examples and references to implementation files in this repository.

## 1. UI-Based Triggers (/ui)
Description: The /ui trigger is a direct command-line style interface that can be used to invoke specific MCP behaviors.
Implementation: See `/examples/ui_triggers/basic_ui.txt`

Key Features:
- Simple, intuitive command-line interface
- Direct control over model behavior
- Immediate feedback and response
- No programming required

Example Commands:
```
/ui set_mode analytical
/ui set_context technical
/ui format markdown
```

Use Cases:
- Direct model control during conversations
- Quick command execution
- Interface customization
- Runtime behavior modification

## 2. XML-Style Tags
Description: Using XML-style tags to wrap content and specify desired MCP behaviors.
Implementation: See `/examples/xml_triggers/xml_example.txt`

Key Features:
- Hierarchical structure
- Nested commands
- Clear syntax
- Complex behavior definition

Example Structure:
```xml
<task type="code_review">
    <language>python</language>
    <focus>security</focus>
</task>
```

Use Cases:
- Structured data processing
- Clear separation of control and content
- Hierarchical command structures
- Complex behavior definitions
- Template-based control

## 3. Function-Based Triggers
Description: Using specific function calls or decorators to invoke MCPs.
Implementation: See `/examples/function_triggers/function_demo.py`

Key Features:
- Programmatic control
- Decorator support
- Context managers
- Object-oriented approach

Example Implementations:
1. Decorators:
```python
@mcp_mode("analytical")
@mcp_context("technical")
def analyze_code(code_snippet):
    return f"Analyzing code: {code_snippet}"
```

2. Direct Function Calls:
```python
controller = MCPController()
controller.set_mode("creative")
```

3. Context Managers:
```python
with MCPContext("analytical", "security"):
    # Code execution in specific context
```

Use Cases:
- Programmatic control
- Integration with existing code
- Automated workflows
- Complex control flows
- State management

## Best Practices
1. Choose the appropriate trigger method based on your use case:
   - Use UI triggers for direct interaction
   - Use XML tags for structured control
   - Use function-based triggers for programmatic control

2. Maintain consistency in trigger style within a project

3. Document custom triggers and their expected behaviors

4. Consider error handling and fallback behaviors

## Limitations and Considerations
1. UI Triggers:
   - Limited to command-line style interface
   - May not support complex nested behaviors
   - Immediate but temporary effects

2. XML Tags:
   - More verbose than other methods
   - Requires proper XML formatting
   - May be overkill for simple controls

3. Function-Based:
   - Requires programming knowledge
   - More setup required
   - May need additional error handling

[This documentation will be updated as new trigger methods are discovered and implemented] 